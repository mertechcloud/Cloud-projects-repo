{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS Full Free-Tier 3-Tier Web App (VPC, Subnets, ASG, S3, RDS Free Tier, No ALB)",
  "Resources": {

    "WebVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "WebVPC"
          }
        ]
      },
      "Metadata": {
        "Comment": "This is the main VPC for our 3-tier app"
      }
    },

    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "WebVPC" },
        "CidrBlock": "10.0.1.0/24",
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": "ca-central-1a",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicSubnet"
          }
        ]
      },
      "Metadata": {
        "Comment": "This is the Public Subnet for WEBVPC of the 3-tier app"
      }
    },

    "PrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "WebVPC" },
        "CidrBlock": "10.0.2.0/24",
        "MapPublicIpOnLaunch": false,
        "AvailabilityZone": "ca-central-1a",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateSubnet"
          }
        ]
      },
      "Metadata": {
        "Comment": "This is the Private Subnet for WEBVPC of our 3-tier app"
      }
    },

    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "WebVPC" },
        "CidrBlock": "10.0.3.0/24",
        "MapPublicIpOnLaunch": false,
        "AvailabilityZone": "ca-central-1b",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateSubnet2"
          }
        ]
      },
      "Metadata": {
        "Comment": "This is the Private Subnet for WEBVPC of our 3-tier app"
      }
    },

    "PublicNACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": { "Ref": "WebVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicNACL"
          }
        ]
      }
    },
    "PublicNACLInbound80": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "PublicNACL" },
        "RuleNumber": 100,
        "Protocol": 6,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": 80,
          "To": 80
        }
      }
    },
    "PublicNACLInbound22": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "PublicNACL" },
        "RuleNumber": 110,
        "Protocol": 6,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": 22,
          "To": 22
        }
      }
    },
    "PublicNACLInboundEphemeral": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "PublicNACL" },
        "RuleNumber": 120,
        "Protocol": 6,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": 1024,
          "To": 65535
        }
      }
    },
    "PublicNACLOutboundAll": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "PublicNACL" },
        "RuleNumber": 100,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": true,
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "PublicSubnetNACLAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet" },
        "NetworkAclId": { "Ref": "PublicNACL" }
      }
    },

    "PrivateNACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": { "Ref": "WebVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateNACL"
          }
        ]
      }
    },
    "PrivateNACLInbound3306": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "PrivateNACL" },
        "RuleNumber": 100,
        "Protocol": 6,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "10.0.1.0/24",
        "PortRange": {
          "From": 3306,
          "To": 3306
        }
      }
    },
    "PrivateNACLInboundEphemeral": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "PrivateNACL" },
        "RuleNumber": 110,
        "Protocol": 6,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": 1024,
          "To": 65535
        }
      }
    },
    "PrivateNACLOutboundAll": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "PrivateNACL" },
        "RuleNumber": 100,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": true,
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "PrivateSubnetNACLAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet" },
        "NetworkAclId": { "Ref": "PrivateNACL" }
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "WebIGW"
          }
        ]
      },
      "Metadata": {
        "Comment": "We are creating an internet gateway for the public access"
      }
    },

    "AttachIGW": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "WebVPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      },
      "Metadata": {
        "Comment": "We are attaching the internet gateway with the WEBVPC"
      }
    },

    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": { "VpcId": { "Ref": "WebVPC" } },
      "Metadata": {
        "Comment": "Creating a Route table for our VPC"
      }
    },

    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachIGW",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      },
      "Metadata": {
        "Comment": "Routing our public call through the Internet gateway using our public route table"
      }
    },

    "PublicSubnetRouteAssoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      },
      "Metadata": {
        "Comment": "Associating the public Subnet with the created public route table to get an internet access"
      }
    },

    "WebSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow HTTP & SSH",
        "VpcId": { "Ref": "WebVPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      },
      "Metadata": {
        "Comment": "Creating a Security group for the WEB-Server allowing HTTP and SSH access"
      }
    },

    "DBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow MySQL only from Web Tier",
        "VpcId": { "Ref": "WebVPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3306,
            "ToPort": 3306,
            "SourceSecurityGroupId": { "Ref": "WebSecurityGroup" }
          }
        ]
      },
      "Metadata": {
        "Comment": "Creating Security group for DB-instance by allowing mysql access"
      }
    },

    "WebEC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ec2.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/AmazonS3FullAccess" ],
        "Path": "/"
      },
      "Metadata": {
        "Comment": "We are Creating a role to be assumed by our Web-Server to allow access to our S3"
      }
    },

    "WebEC2RoleProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [ { "Ref": "WebEC2Role" } ]
      }
    },

    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Fn::Sub": "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
        },
        "InstanceType": "t2.micro",
        "SecurityGroups": [ { "Ref": "WebSecurityGroup" } ],
        "IamInstanceProfile": { "Ref": "WebEC2RoleProfile" },
        "KeyName": "<YourKeyPairName>",
        "UserData": { "Fn::Base64": "#!/bin/bash\nsudo yum update -y\nsudo yum install -y httpd\nsudo systemctl start httpd\nsudo systemctl enable httpd\necho '<h1>Hello from AutoScaling Web Server</h1>' | sudo tee /var/www/html/index.html" }
      },
      "Metadata": {
        "Comment": "Creating a launch Templates for an Auto scaling group of the web Server"
      }
    },

    "WebAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [ { "Ref": "PublicSubnet" } ],
        "LaunchConfigurationName": { "Ref": "LaunchConfiguration" },
        "MinSize": "1",
        "MaxSize": "2",
        "DesiredCapacity": "1",
        "Tags": [
          {
            "Key": "Name",
            "Value": "WebServer",
            "PropagateAtLaunch": true
          }
        ]
      }
    },

    "WebS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": { "Fn::Sub": "meron-web-s3-${AWS::AccountId}" }
      },
      "Metadata": {
        "Comment": "Creating an S3 Bucket"
      }
    },

    "RDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": "merondb",
        "AllocatedStorage": "20",
        "DBInstanceClass": "db.t2.micro",
        "Engine": "MySQL",
        "MasterUsername": "admin",
        "MasterUserPassword": "Admin12345",
        "VPCSecurityGroups": [ { "Ref": "DBSecurityGroup" } ],
        "DBSubnetGroupName": { "Ref": "DBSubnetGroup" },
        "MultiAZ": false,
        "PubliclyAccessible": false
      },
      "Metadata": {
        "Comment": "We are creating a MYSQL engine RDS, Password and Admin are not the same with the one that is actualy creating"
      }
    },

    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnets for RDS",
        "SubnetIds": [
          { "Ref": "PrivateSubnet" },
          { "Ref": "PrivateSubnet2" }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "DBSubnetGroup"
          }
        ]
      }
    }

  },
  "Outputs":{
    "WebS3BucketName":{"Value":{"Ref":"WebS3Bucket"},"Description":"S3 Bucket for static content"},
    "AutoScalingGroupName":{"Value":{"Ref":"WebAutoScalingGroup"},"Description":"Web Tier ASG"},
    "RDSInstanceEndpoint":{"Value":{"Fn::GetAtt":["RDSInstance","Endpoint.Address"]},"Description":"RDS Endpoint"}
  }
}
